// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(OrderManagementDbContext))]
    partial class OrderManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8d6dad3-c8fc-443e-a02b-24ae0b9df15c"),
                            CreatedDate = new DateTime(2024, 7, 19, 6, 58, 59, 325, DateTimeKind.Utc).AddTicks(5987),
                            Description = "Default Description",
                            LastUpdatedDate = new DateTime(2024, 7, 19, 6, 58, 59, 325, DateTimeKind.Utc).AddTicks(5990),
                            Name = "Default Company"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3419f0b4-29ed-4603-a6af-80838c5cacdd"),
                            CompanyId = new Guid("d8d6dad3-c8fc-443e-a02b-24ae0b9df15c"),
                            CreatedDate = new DateTime(2024, 7, 19, 6, 58, 59, 325, DateTimeKind.Utc).AddTicks(6367),
                            LastUpdatedDate = new DateTime(2024, 7, 19, 6, 58, 59, 325, DateTimeKind.Utc).AddTicks(6367),
                            Name = "Default Company",
                            OrderStatus = 0,
                            ProductCount = 100,
                            TotalPrice = 1000m,
                            UnitPrice = 10m,
                            UserId = new Guid("a6cec149-f87b-43e0-b4e8-43fa24e05c58")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StockCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b520d963-aad4-4df9-b0ec-e89f5c82d52d"),
                            CompanyId = new Guid("d8d6dad3-c8fc-443e-a02b-24ae0b9df15c"),
                            CreatedDate = new DateTime(2024, 7, 19, 6, 58, 59, 326, DateTimeKind.Utc).AddTicks(6261),
                            Description = "Default Description",
                            LastUpdatedDate = new DateTime(2024, 7, 19, 6, 58, 59, 326, DateTimeKind.Utc).AddTicks(6261),
                            Name = "Default Name",
                            Price = 100m,
                            ProductCategoryId = new Guid("a248dbf5-34d2-402c-b5d4-b882911d8768"),
                            StockCount = 100
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a248dbf5-34d2-402c-b5d4-b882911d8768"),
                            CreatedDate = new DateTime(2024, 7, 19, 6, 58, 59, 326, DateTimeKind.Utc).AddTicks(5999),
                            Description = "Default Description",
                            LastUpdatedDate = new DateTime(2024, 7, 19, 6, 58, 59, 326, DateTimeKind.Utc).AddTicks(6001),
                            Name = "Default Company"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6cec149-f87b-43e0-b4e8-43fa24e05c58"),
                            CreatedDate = new DateTime(2024, 7, 19, 6, 58, 59, 326, DateTimeKind.Utc).AddTicks(7115),
                            Description = "Default Description",
                            Email = "Default@gmail.com",
                            LastUpdatedDate = new DateTime(2024, 7, 19, 6, 58, 59, 326, DateTimeKind.Utc).AddTicks(7115),
                            Name = "Default Name",
                            PasswordHash = new byte[] { 152, 136, 82, 95, 66, 17, 199, 176, 207, 100, 251, 99, 93, 61, 50, 22, 84, 134, 56, 128, 73, 91, 225, 65, 162, 220, 33, 212, 25, 9, 24, 70, 121, 201, 219, 203, 95, 47, 154, 134, 111, 98, 101, 3, 52, 156, 139, 194, 199, 17, 144, 64, 217, 235, 160, 208, 197, 179, 45, 134, 80, 189, 186, 67 },
                            PasswordSalt = new byte[] { 45, 221, 236, 59, 114, 56, 140, 4, 185, 187, 18, 252, 136, 22, 176, 71, 98, 15, 89, 164, 251, 46, 45, 228, 197, 67, 119, 85, 89, 1, 159, 244, 167, 175, 121, 205, 166, 141, 135, 90, 161, 13, 89, 100, 138, 60, 192, 17, 115, 10, 142, 25, 255, 184, 129, 48, 255, 5, 214, 105, 93, 193, 51, 35, 14, 90, 134, 4, 194, 137, 103, 9, 62, 31, 202, 92, 222, 139, 247, 79, 215, 195, 228, 179, 51, 155, 124, 71, 113, 102, 30, 56, 46, 245, 157, 52, 135, 16, 253, 126, 43, 250, 74, 195, 167, 236, 95, 86, 64, 150, 212, 87, 76, 226, 36, 57, 224, 119, 238, 233, 66, 2, 30, 26, 46, 98, 194, 31 }
                        });
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderProduct");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("b520d963-aad4-4df9-b0ec-e89f5c82d52d"),
                            OrderId = new Guid("3419f0b4-29ed-4603-a6af-80838c5cacdd")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
